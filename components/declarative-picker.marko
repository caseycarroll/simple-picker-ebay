class {
    onCreate() {
        this.state = {
            selectedTabIndex: 0,
            selectedItems: {},
            showRowContent: false,
            selectedRowIndex: 0,
            optionsInView: [],
            isResetEnabled: false,
        };
    }

    selectTab({ index }) {
        this.state.selectedTabIndex = index;
    }

    toggleItem(selectedCell, { pressed }) {
        const clone = { ...this.state.selectedItems };
        if (pressed) {
            clone[selectedCell.selectionId] = selectedCell;
        } else {
            delete clone[selectedCell.selectionId];
        }
        this.state.selectedItems = clone;
    }

    selectRow(rowIndex) {
        this.state.showRowContent = true;
        this.state.selectedRowIndex = rowIndex;
    }

    navigateBack() {
        this.state.showRowContent = false;
    }

    handleReset(){
        const clone = { ...this.state.selectedItems };
        
        this.state.optionsInView.forEach(visibleOption => {
            if(Object.hasOwn(this.state.selectedItems, visibleOption)) {
                delete clone[visibleOption];
            }
        });

        this.state.selectedItems = clone;
    }
}

style {
    .wrapper {
        max-width: 500px;
        border: 1px solid black;
        border-radius: 3px;
        padding: 8px;
    }

    .flow > * + * {
        margin-block-start: 16px;
    }

    .cluster {
        display: flex;
        gap: 8px;
    }
}

<macro|{cell}| name="grid">
    $ const cells = [...cell]
    $ const visibleItems = cells.map(({selectionId}) => selectionId)
    $ state.optionsInView = [...state.optionsInView, ...visibleItems];
    <div>
        <for|cell| of=(cells)>
            <ebay-toggle-button
                on-toggle("toggleItem", cell)
                pressed=Object.hasOwn(
                    state.selectedItems,
                    cell.selectionId,
                )
            >
                <${cell.renderBody}/>
            </ebay-toggle-button>
        </for>
    </div>
</macro>

<div class="wrapper flow">
    $ const panel = [...input.panel];
    $ const selectedPanel = panel[state.selectedTabIndex];
    $ state.optionsInView = [];
    
    <if(!state.showRowContent)>
        <if(input.tab)>
            <ebay-segmented-buttons on-change("selectTab")>
                <for|tab, index| of=input.tab>
                    <@button selected=index === state.selectedTabIndex>
                        <${tab.renderBody}/>
                    </@button>
                </for>
            </ebay-segmented-buttons>
        </if>

        // TODO: Abstract grid with reset
        <if(selectedPanel.grid)>
            <grid cell=selectedPanel.grid.cell />
        </if>

        // TODO: Abstract grouping with reset
        // note: can't re-use grid with reset because state would clash
        <if(selectedPanel.grouping)>            
            <for|grouping| of=(selectedPanel.grouping)>
                <ebay-accordion>
                    <@details open>
                        <@summary>${grouping.title}</@summary>
                        <grid cell=grouping.grid.cell />
                    </@details>
                </ebay-accordion>
            </for>
        </if>

        <if(selectedPanel.rowButton)>
            <for|rowButton, index| of=selectedPanel.rowButton>
                <div>
                    <button on-click("selectRow", index)>
                        <${rowButton.renderBody}/>
                    </button>
                </div>
            </for>
        </if>
    </if>
    <else>
        $ const selectedRow = selectedPanel.row[state.selectedRowIndex];

        <div class="cluster">
            <button on-click("navigateBack")>
                Back
            </button>

            <h3>${selectedRow.title}</h3>
        </div>

        // TODO: Abstract grid with reset
        <if(selectedRow.grid)>
            <grid cell=selectedRow.grid.cell />
        </if>

        // TODO: Abstract grouping with reset
        // note: can't re-use grid with reset because state would clash
        <if(selectedRow.grouping)>
            <for|grouping| of=(selectedRow.grouping)>
                <ebay-accordion>
                    <@details open>
                        <@summary>${grouping.title}</@summary>
                        <grid cell=grouping.grid.cell />
                    </@details>
                </ebay-accordion>
            </for>
        </if>
    </else>

    <if((!state.showRowContent && !selectedPanel.rowButton) || state.showRowContent)>
        <div>
            $ state.isResetEnabled = Object.keys(state.selectedItems).some(selectedKey => state.optionsInView.includes(selectedKey))
            <ebay-button priority="tertiary" disabled=!state.isResetEnabled on-click("handleReset")>
                Reset
            </ebay-button>
        </div>
    </if>
</div>
$ const selectedJson = JSON.stringify(state.selectedItems);
<h3>State Debug</h3>
<table>
    <thead>
        <th>Name</th>
        <th>Value</th>
    </thead>
    <tbody>
        <tr>
            <th>selectedAspects:</th>
            <td>${selectedJson}</td>
        </tr>
        <tr>
            <th>selectedCategoryIndex:</th>
            <td>${state.selectedTabIndex}</td>
        </tr>
        <tr>
            <th>optionsInView:</th>
            <td>${state.optionsInView}</td>
        </tr>
        <tr>
            <th>isResetEnabled:</th>
            <td>${state.isResetEnabled}</td>
        </tr>
    </tbody>
</table>
